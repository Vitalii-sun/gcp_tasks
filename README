NAT (Network Address Translation) — це механізм перетворення приватних IP-адрес у публічні (і навпаки).

Для чого потрібно:
1) Дозволяє внутрішнім інстансам без публічного IP виходити в інтернет (наприклад, щоб ставити пакети).
2) Ховає приватну інфраструктуру від прямого доступу ззовні (безпека).
3) У нашому завданні NAT потрібен, щоб другий сервер (у приватному сабнеті) міг звертатися до інтернету (наприклад, для apt install nginx).




Етапи виконання:

Етап 1: Налаштування провайдера Terraform для GCP

Етап 2: Створення VPC мережі

Створюємо кастомну VPC мережу (без автоматичних сабнетів).
VPC — це віртуальна приватна хмара, де розміщуються всі ресурси. Кастомна мережа дозволяє контролювати сабнети, firewall та маршрутизацію. 
Це необхідно для сегментації трафіку (public vs private), щоб забезпечити ізоляцію та безпеку, як вимагає завдання.

Етап 3: Створення сабнетів

Створюємо два сабнети в VPC.

Перший сабнет: Розмір 2 IP (але це неможливо. Використаємо /29 - 8 адрес, 4 usable).
Другий сабнет: Розмір 8 IP (/28, 16 адрес, 12 usable — але для "розміру 8 IP" це підходить найбільше).

Для чого це робиться: Сабнети сегментують мережу для кращої організації та безпеки. Перший — для публічних ресурсів (jumphost з public IP), 
другий — для приватних (без доступу ззовні). Малий розмір економить IP-адреси, але в GCP є обмеження.
Чому не можна створити сабнет на 2 IP: У GCP мінімальний розмір сабнета — /29 (8 адрес). Це через резервування 4 IP-адрес 
у кожному сабнеті: перша — мережева адреса, друга — шлюз (gateway), передостання — резервована для майбутнього використання, остання — broadcast-адреса. 
Для /31 (2 адреси) або /30 (4 адреси) всі адреси резервуються, і usable IPs = 0. Тому неможливо мати сабнет з лише 2 IP (usable або total); 
мінімум — /29 з 4 usable IPs. Це робиться для стандартизації та забезпечення функціональності мережі (шлюз тощо).

Етап 4: Створення Cloud NAT

Створюємо Cloud Router і Cloud NAT для другого (приватного) сабнета.
Для чого це робиться: NAT дозволяє приватній VM виходити в інтернет без public IP. Це критично для установки софту (nginx, certbot) під час запуску VM. 
Без NAT приватна VM не зможе завантажувати пакети, що зламає автоматизацію.

Етап 5: Створення firewall правил

Створюємо правила для ingress/egress.

Дозволяємо SSH (22) на jumphost тільки з моєї IP.
Дозволяємо HTTP/HTTPS (80, 443) на jumphost з будь-якої адреси.
Дозволяємо 80 порт до приватної VM тільки з внутрішньої мережі (наприклад, від jumphost).
Дозволяємо все інше ingress.


Firewall контролює трафік для безпеки. Обмеження ingress мінімізує атаку (principle of least privilege). Egress без обмежень дозволяє VM 
виходити в інтернет (для оновлень). Внутрішній доступ на 80 — для proxy з jumphost до приватної VM.

Етап 6: Створення VM instances


Jumphost: У першому сабнеті, з public IP. Встановити nginx + SSL, власний index.html, proxy pass до приватної VM.
Приватна VM: У другому сабнеті, тільки private IP. Встановити nginx з іншим index.html.


Для чого це робиться: VM — це сервери для хостингу веб-контенту. Jumphost діє як bastion (вхідна точка) з public доступом, proxy забезпечує 
доступ до приватної VM без її експозиції. SSL додає шифрування для HTTPS. Власні index.html — для демонстрації контенту. 
Автоматизація через startup-script у Terraform встановлює все без ручного втручання.

Етап 7: Налаштування системи та користувачів на VM

Що робити: Через startup-script:

Створюємо користувача devops, додати SSH-доступ з ключем.
Забороняємо root-логін по SSH та парольну автентифікацію.
Виключаємо unattended-upgrades (видалити пакет або налаштувати).


Для чого це робиться: Це hardening безпеки VM. Devops-користувач з ключем — для безпечного доступу без паролів (менше ризиків). 
Заборона root/password — запобігає brute-force атакам. Відключення auto-updates — для контролю оновлень, щоб уникнути несподіваних змін у продакшні.


ДОДАТКОМО:

Додав до цього стеку Filebeat і Metricbeat (Docker Compose)

    ELASTIC_HOST          = "https://elasticsearch.babenkov.pp.ua:9200"
    KIBANA_HOST           = "https://kibana.babenkov.pp.ua:5601"